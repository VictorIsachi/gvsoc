diff --git a/pulp/CMakeLists.txt b/pulp/CMakeLists.txt
index e9710c1..799fbf9 100644
--- a/pulp/CMakeLists.txt
+++ b/pulp/CMakeLists.txt
@@ -16,4 +16,5 @@ add_subdirectory(soc_eu)
 add_subdirectory(stdout)
 add_subdirectory(neureka)
 add_subdirectory(wmem)
-add_subdirectory(spatz)
\ No newline at end of file
+add_subdirectory(spatz)
+add_subdirectory(redmule)
\ No newline at end of file
diff --git a/pulp/snitch/snitch_cluster/snitch_cluster.py b/pulp/snitch/snitch_cluster/snitch_cluster.py
index 6bd54f1..4a1675e 100644
--- a/pulp/snitch/snitch_cluster/snitch_cluster.py
+++ b/pulp/snitch/snitch_cluster/snitch_cluster.py
@@ -27,6 +27,7 @@ from pulp.idma.snitch_dma import SnitchDma
 from pulp.cluster.l1_interleaver import L1_interleaver
 import gvsoc.runner
 import math
+from pulp.redmule.redmule import RedMule
 
 
 GAPY_TARGET = True
@@ -52,6 +53,7 @@ class ClusterArch:
         self.tcdm          = ClusterArch.Tcdm(base, self.nb_core)
         self.peripheral    = Area( base + 0x0002_0000, 0x0001_0000)
         self.zero_mem      = Area( base + 0x0003_0000, 0x0001_0000)
+        self.redmule       = Area( base + 0x0020_1000, 0x0001_0000)
 
     class Tcdm:
         def __init__(self, base, nb_masters):
@@ -118,6 +120,9 @@ class SnitchCluster(gvsoc.systree.Component):
         # Zero memory
         zero_mem = ZeroMem(self, 'zero_mem', size=arch.zero_mem.size)
 
+        # RedMule
+        redmule = RedMule(self, 'redmule', arch.tcdm.nb_superbanks * arch.tcdm.nb_banks_per_superbank)
+
         # Cores
         cores = []
         cores_ico = []
@@ -179,6 +184,10 @@ class SnitchCluster(gvsoc.systree.Component):
         wide_axi.o_MAP(zero_mem.i_INPUT(), base=arch.zero_mem.base, size=arch.zero_mem.size, rm_base=True)
         narrow_axi.o_MAP(wide_axi.i_INPUT(), name='zero_mem', base=arch.zero_mem.base, size=arch.zero_mem.size, rm_base=False)
 
+        #RedMule
+        narrow_axi.add_mapping('redmule', base=arch.redmule.base, remove_offset=arch.redmule.base, size=arch.redmule.size)
+        self.bind(narrow_axi, 'redmule', redmule, 'input')
+
     def i_WIDE_INPUT(self) -> gvsoc.systree.SlaveItf:
         return gvsoc.systree.SlaveItf(self, 'wide_input', signature='io')
 
