diff --git a/pulp/CMakeLists.txt b/pulp/CMakeLists.txt
index e9710c1..799fbf9 100644
--- a/pulp/CMakeLists.txt
+++ b/pulp/CMakeLists.txt
@@ -16,4 +16,5 @@ add_subdirectory(soc_eu)
 add_subdirectory(stdout)
 add_subdirectory(neureka)
 add_subdirectory(wmem)
-add_subdirectory(spatz)
\ No newline at end of file
+add_subdirectory(spatz)
+add_subdirectory(redmule)
\ No newline at end of file
diff --git a/pulp/snitch/snitch_cluster/snitch_cluster.py b/pulp/snitch/snitch_cluster/snitch_cluster.py
index 6bd54f1..92f3983 100644
--- a/pulp/snitch/snitch_cluster/snitch_cluster.py
+++ b/pulp/snitch/snitch_cluster/snitch_cluster.py
@@ -27,6 +27,7 @@ from pulp.idma.snitch_dma import SnitchDma
 from pulp.cluster.l1_interleaver import L1_interleaver
 import gvsoc.runner
 import math
+from pulp.redmule.redmule import RedMule
 
 
 GAPY_TARGET = True
@@ -52,15 +53,18 @@ class ClusterArch:
         self.tcdm          = ClusterArch.Tcdm(base, self.nb_core)
         self.peripheral    = Area( base + 0x0002_0000, 0x0001_0000)
         self.zero_mem      = Area( base + 0x0003_0000, 0x0001_0000)
+        # self.redmule       = Area( base + 0x0020_1000, 0x0001_0000)
+        self.redmule       = Area( 0x1020_1000,        0x0001_0000)
 
     class Tcdm:
         def __init__(self, base, nb_masters):
             self.area = Area( base + 0x0000_0000, 0x0002_0000)
             self.nb_banks_per_superbank = 8
-            self.bank_width = 8
+            self.bank_width = 4
             self.nb_superbanks = 4
             self.bank_size = self.area.size / self.nb_superbanks / self.nb_banks_per_superbank
             self.nb_masters = nb_masters
+            self.nb_hwpe_master = self.nb_banks_per_superbank * self.nb_superbanks
 
 
 class SnitchClusterTcdm(gvsoc.systree.Component):
@@ -75,7 +79,7 @@ class SnitchClusterTcdm(gvsoc.systree.Component):
                 width_log2=int(math.log2(arch.bank_width))))
 
         interleaver = L1_interleaver(self, 'interleaver', nb_slaves=nb_banks,
-            nb_masters=arch.nb_masters, interleaving_bits=int(math.log2(arch.bank_width)))
+            nb_masters=arch.nb_masters+1, interleaving_bits=int(math.log2(arch.bank_width)))
 
         dma_interleaver = DmaInterleaver(self, 'dma_interleaver', arch.nb_masters,
             nb_banks, arch.bank_width)
@@ -85,8 +89,10 @@ class SnitchClusterTcdm(gvsoc.systree.Component):
             self.bind(dma_interleaver, 'out_%d' % i, banks[i], 'input')
 
         for i in range(0, arch.nb_masters):
-            self.bind(self, f'in_{i}', interleaver, f'in_{i}')
-            self.bind(self, f'dma_input', dma_interleaver, f'input')
+            self.bind(self,             f'in_{i}',      interleaver,        f'in_{i}')
+            self.bind(self,             f'dma_input',   dma_interleaver,    f'input')
+
+        self.bind(self, f'hwpe_in', interleaver, f'in_{arch.nb_masters}')
 
     def i_INPUT(self, port: int) -> gvsoc.systree.SlaveItf:
         return gvsoc.systree.SlaveItf(self, f'in_{port}', signature='io')
@@ -94,6 +100,9 @@ class SnitchClusterTcdm(gvsoc.systree.Component):
     def i_DMA_INPUT(self) -> gvsoc.systree.SlaveItf:
         return gvsoc.systree.SlaveItf(self, f'dma_input', signature='io')
 
+    def i_HWPE_INPUT(self) -> gvsoc.systree.SlaveItf:
+        return gvsoc.systree.SlaveItf(self, f'hwpe_in', signature='io')
+
 
 
 class SnitchCluster(gvsoc.systree.Component):
@@ -118,6 +127,9 @@ class SnitchCluster(gvsoc.systree.Component):
         # Zero memory
         zero_mem = ZeroMem(self, 'zero_mem', size=arch.zero_mem.size)
 
+        # RedMule
+        redmule = RedMule(self, 'redmule', arch.tcdm.nb_superbanks * arch.tcdm.nb_banks_per_superbank)
+
         # Cores
         cores = []
         cores_ico = []
@@ -179,6 +191,11 @@ class SnitchCluster(gvsoc.systree.Component):
         wide_axi.o_MAP(zero_mem.i_INPUT(), base=arch.zero_mem.base, size=arch.zero_mem.size, rm_base=True)
         narrow_axi.o_MAP(wide_axi.i_INPUT(), name='zero_mem', base=arch.zero_mem.base, size=arch.zero_mem.size, rm_base=False)
 
+        #RedMule
+        narrow_axi.add_mapping('redmule', base=arch.redmule.base, remove_offset=arch.redmule.base, size=arch.redmule.size)
+        self.bind(narrow_axi, 'redmule', redmule, 'input')
+        self.bind(redmule, 'out', tcdm, 'hwpe_in')
+
     def i_WIDE_INPUT(self) -> gvsoc.systree.SlaveItf:
         return gvsoc.systree.SlaveItf(self, 'wide_input', signature='io')
 
