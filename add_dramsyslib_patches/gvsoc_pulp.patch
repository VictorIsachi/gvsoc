diff --git a/pulp/CMakeLists.txt b/pulp/CMakeLists.txt
index e9710c1..afd60ec 100644
--- a/pulp/CMakeLists.txt
+++ b/pulp/CMakeLists.txt
@@ -16,4 +16,5 @@ add_subdirectory(soc_eu)
 add_subdirectory(stdout)
 add_subdirectory(neureka)
 add_subdirectory(wmem)
-add_subdirectory(spatz)
\ No newline at end of file
+add_subdirectory(spatz)
+add_subdirectory(light_redmule)
\ No newline at end of file
diff --git a/pulp/chips/pulp_open/cluster.json b/pulp/chips/pulp_open/cluster.json
index 259971a..00e541f 100644
--- a/pulp/chips/pulp_open/cluster.json
+++ b/pulp/chips/pulp_open/cluster.json
@@ -27,12 +27,12 @@
     "l1": {
         "mapping": {
             "base": "0x10000000",
-            "size": "0x00010000",
+            "size": "0x00100000",
             "remove_offset": "0x10000000"
         },
         "ts_mapping": {
             "base": "0x10100000",
-            "size": "0x00010000",
+            "size": "0x00100000",
             "remove_offset": "0x10100000"
         },
         "banking_factor": 2,
@@ -144,6 +144,14 @@
             }
         },
 
+        "redmule": {
+            "mapping": {
+                "base": "0x10201000",
+            "size": "0x00000400",
+            "remove_offset": "0x10201000"
+            }
+        },
+
         "icache_ctrl": {
             "mapping": {
                 "base": "0x10201400",
diff --git a/pulp/chips/pulp_open/cluster.py b/pulp/chips/pulp_open/cluster.py
index 7078c50..dc3c51a 100644
--- a/pulp/chips/pulp_open/cluster.py
+++ b/pulp/chips/pulp_open/cluster.py
@@ -25,6 +25,7 @@ from pulp.timer.timer_v2 import Timer
 from pulp.cluster.cluster_control_v2 import Cluster_control
 from pulp.ne16.ne16 import Ne16
 from pulp.icache_ctrl.icache_ctrl_v2 import Icache_ctrl
+from pulp.light_redmule.light_redmule import LightRedmule
 
 
 def get_cluster_name(cid: int):
@@ -83,6 +84,9 @@ class Cluster(st.Component):
         first_external_pcer = 12
         has_ne16 = False
 
+        redmule_irq         = self.get_property('pe/irq').index('acc_0')
+        has_redmule         = True
+
 
         #
         # Components
@@ -112,7 +116,7 @@ class Cluster(st.Component):
         demux_periph_ico = Router(self, 'demux_periph_ico')
 
         # MCHAN
-        mchan = Mchan(self, 'dma', nb_channels=nb_pe+1)
+        mchan = Mchan(self, 'dma', nb_channels=nb_pe+1, max_nb_ext_read_req=256, max_nb_ext_write_req=256, max_burst_length=512, global_queue_depth=64)
 
         # Timer
         timer = Timer(self, 'timer')
@@ -124,6 +128,21 @@ class Cluster(st.Component):
             # NE16
             ne16 = Ne16(self, 'ne16')
 
+        if has_redmule:
+            # RedMule
+            import math
+            l1_banking_factor = self.get_property('l1/banking_factor')
+            nb_l1_banks = 1<<int(math.log(nb_pe * l1_banking_factor, 2.0))
+            # redmule = RedMule(self, 'redmule', nb_l1_banks)
+            redmule = LightRedmule(self, 'redmule',
+                    redmule_id          = 0,
+                    tcdm_bank_width     = 4,
+                    tcdm_bank_number    = nb_l1_banks,
+                    elem_size           = 2,
+                    ce_height           = 12,
+                    ce_width            = 4,
+                    ce_pipe             = 3)
+
         # Icache controller
         icache_ctrl = Icache_ctrl(self, 'icache_ctrl')
     
@@ -205,6 +224,10 @@ class Cluster(st.Component):
             periph_ico.add_mapping('ne16', **self._reloc_mapping(self.get_property('peripherals/ne16/mapping')))
             self.bind(periph_ico, 'ne16', ne16, 'input')
 
+        if has_redmule:
+            periph_ico.add_mapping('redmule', **self._reloc_mapping(self.get_property('peripherals/redmule/mapping')))
+            self.bind(periph_ico, 'redmule', redmule, 'input')
+
         # MCHAN
         self.bind(mchan, 'ext_irq_itf', self, 'dma_irq')
         self.bind(mchan, 'ext_itf', cluster_ico, 'input')
@@ -237,6 +260,12 @@ class Cluster(st.Component):
 
             self.bind(ne16, 'out', l1, 'ne16_in')
 
+        if has_redmule:
+            # REDMULE
+            # for i in range(0, nb_pe):
+            #     self.bind(redmule, 'irq', event_unit, 'in_event_%d_pe_%d' % (redmule_irq, i))
+            self.bind(redmule, 'tcdm', l1, 'redmule_in')
+
         # Icache controller
         self.bind(icache_ctrl, 'enable', icache, 'enable')
         self.bind(icache_ctrl, 'flush', icache, 'flush')
diff --git a/pulp/chips/pulp_open/l1_subsystem.py b/pulp/chips/pulp_open/l1_subsystem.py
index 4a38b6e..05e5934 100644
--- a/pulp/chips/pulp_open/l1_subsystem.py
+++ b/pulp/chips/pulp_open/l1_subsystem.py
@@ -123,6 +123,7 @@ class L1_subsystem(st.Component):
             self.bind(interleaver, 'out_%d' % i, l1_banks[i], 'input')
 
         self.bind(self, 'ne16_in', interleaver, 'in_%d' % (nb_pe + 4))
+        self.bind(self, 'redmule_in', interleaver, 'in_%d' % (nb_pe + 4))
 
         for i in range(0, 4):
             self.bind(self, 'dma_in_%d' % i, interleaver, 'in_%d' % (nb_pe + i))
diff --git a/pulp/chips/pulp_open/pulp_open.py b/pulp/chips/pulp_open/pulp_open.py
index 1e9fd24..33e61ce 100644
--- a/pulp/chips/pulp_open/pulp_open.py
+++ b/pulp/chips/pulp_open/pulp_open.py
@@ -47,13 +47,13 @@ class Pulp_open(st.Component):
         padframe = Padframe(self, 'padframe', config_file=padframe_config_file)
 
         # Soc clock domain
-        soc_clock = Clock_domain(self, 'soc_clock_domain', frequency=50000000)
+        soc_clock = Clock_domain(self, 'soc_clock_domain', frequency=500000000)
 
         # Clusters clock domains
         cluster_clocks = []
         for cid in range(0, nb_cluster):
             cluster_name = get_cluster_name(cid)
-            cluster_clocks.append(Clock_domain(self, cluster_name + '_clock', frequency=50000000))
+            cluster_clocks.append(Clock_domain(self, cluster_name + '_clock', frequency=500000000))
 
         # Clusters
         clusters = []
@@ -65,11 +65,11 @@ class Pulp_open(st.Component):
         soc = Soc(self, 'soc', parser, config_file=soc_config_file, chip=self, cluster=clusters[0])
 
         # Fast clock
-        fast_clock = Clock_domain(self, 'fast_clock', frequency=24576063*2)
+        fast_clock = Clock_domain(self, 'fast_clock', frequency=245760630*2)
         fast_clock_generator = Clock_generator(self, 'fast_clock_generator', powered_on=False, powerup_time=200000000)
 
         # Ref clock
-        ref_clock = Clock_domain(self, 'ref_clock', frequency=65536)
+        ref_clock = Clock_domain(self, 'ref_clock', frequency=6553600)
         ref_clock_generator = Clock_generator(self, 'ref_clock_generator')
 
         # AXI proxy
diff --git a/pulp/chips/pulp_open/soc.py b/pulp/chips/pulp_open/soc.py
index 26403fb..1ed17a7 100644
--- a/pulp/chips/pulp_open/soc.py
+++ b/pulp/chips/pulp_open/soc.py
@@ -186,7 +186,7 @@ class Soc(st.Component):
         for cid in range(0, nb_cluster):
             self.bind(fll_cluster, 'clock_out', self, get_cluster_name(cid) + '_fll')
 
-        periph_clock = Clock_domain(self, 'periph_clock', frequency=50000000)
+        periph_clock = Clock_domain(self, 'periph_clock', frequency=500000000)
 
         self.bind(fll_periph, 'clock_out', periph_clock, 'clock_in')
         self.bind(periph_clock, 'out', udma, 'periph_clock')
@@ -261,8 +261,8 @@ class Soc(st.Component):
         self.bind(soc_ico, 'axi_proxy', axi_ico, 'input')
         self.bind(soc_ico, 'ddr', axi_ico, 'input')
 
-        axi_ico.add_mapping('ddr', base=0x80000000, size=0x80000000)
-        self.bind(soc_ico, 'ddr', self, 'ddr')
+        axi_ico.add_mapping('ddr', base=0x80000000, size=0x00100000)
+        self.bind(axi_ico, 'ddr', self, 'ddr')
 
         self.bind(axi_ico, 'soc', soc_ico, 'axi_slave')
         self.bind(self, 'soc_input', axi_ico, 'input')
diff --git a/pulp/fll/fll_v1_impl.cpp b/pulp/fll/fll_v1_impl.cpp
index fcc9c5f..5e8a4f1 100644
--- a/pulp/fll/fll_v1_impl.cpp
+++ b/pulp/fll/fll_v1_impl.cpp
@@ -208,6 +208,9 @@ void fll::fll_check_state()
     // Non-locked mode, just keep the frequency out of the oscillator
   }
 
+  //TODO: Here is just a <Dirty Hack> to boost frequncy of pulp-open chips
+  //      In the end, we still need to change this in a proper way
+  frequency = frequency * 32;
 
   this->trace.msg("Setting new frequency (frequency: %d Hz)\n", frequency);
   this->fll_clock_itf.set_frequency(frequency);
